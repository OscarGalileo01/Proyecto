/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import bd.Conexion;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author O S C A R
 */
public class ventana extends javax.swing.JFrame {

    /**
     * Creates new form ventana
     */
    public ventana() {
        initComponents();
        conectarBD();
        initTablaProductos();
        initTablaCompras();
        initCombo();
    }

    private void conectarBD() {
        try {
            //1ºCrear el objeto Connection
            conexion = null;
            conexion = Conexion.mySQL("fruteria2", "root", "");
            if (conexion == null) {
                JOptionPane.showMessageDialog(this, "ERROR, ha sido posible conectar con la BD");
                System.exit(0);
            }
            //2ºCrear el objeto Statement
            sentenciaClases = conexion.createStatement();
            sentencia = conexion.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initTablaProductos() {
        modeloProductos = (DefaultTableModel) tablaProductos.getModel();
        header = tablaProductos.getTableHeader();

        header.setBackground(Color.RED);
        header.setForeground(Color.WHITE);
    }

    private void initTablaCompras() {
        modeloCompras = (DefaultTableModel) tablaCompra.getModel();
    }

    private void initCombo() {

        try {

            String sentencia = "SELECT `nombre` FROM `categoria`;";
            resultadoClases = sentenciaClases.executeQuery(sentencia);

            while (resultadoClases.next()) {
                cmbFrutas.addItem(resultadoClases.getString("nombre"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(ventana.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbFrutas = new javax.swing.JComboBox<>();
        scroll = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCompra = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelBotones = new javax.swing.JPanel();
        btnBorrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbFrutas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFrutasItemStateChanged(evt);
            }
        });

        scroll.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        tablaProductos.setForeground(new java.awt.Color(102, 102, 102));
        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProductos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaProductos.setSelectionBackground(new java.awt.Color(255, 51, 51));
        tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductosMouseClicked(evt);
            }
        });
        scroll.setViewportView(tablaProductos);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("CATEGORIA");

        tablaCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Cantidad", "Precio + IVA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaCompra);

        lblTotal.setBackground(new java.awt.Color(255, 255, 255));
        lblTotal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 204, 0));
        lblTotal.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("TOTAL: ");

        panelBotones.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        panelBotones.add(btnBorrar);

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        panelBotones.add(btnCancelar);

        jButton3.setText("Pagar");
        panelBotones.add(jButton3);

        jButton4.setText("Nueva compra");
        panelBotones.add(jButton4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(648, 648, 648)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbFrutas, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31)
                .addComponent(panelBotones, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbFrutas, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelBotones, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFrutasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFrutasItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                modeloProductos.setRowCount(0);
                // String sentencia_sql = "SELECT `nombre`,`precio` FROM `producto` WHERE `descripcion`='" + cmbFrutas.getSelectedItem().toString() + "';";
                String sentencia_sql = "SELECT producto.nombre, producto.precio FROM producto INNER JOIN categoria ON producto.cod_categoria = categoria.id WHERE producto.cod_categoria=" + (cmbFrutas.getSelectedIndex() + 1) + ";";
                //String sentencia_sql = "SELECT producto.nombre,producto.precio FROM `producto` A LEFT JOIN `categoria` ON producto.cod_categoria = categoria.id WHERE categoria.id = " + (cmbFrutas.getSelectedIndex()+1) + ";";
                resultado = sentencia.executeQuery(sentencia_sql);

                Object[] columnas = new Object[2];

                while (resultado.next()) {
                    columnas[0] = resultado.getString("nombre");
                    columnas[1] = resultado.getFloat("precio");

                    modeloProductos.addRow(columnas);
                }
            } catch (SQLException ex) {
                Logger.getLogger(ventana.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_cmbFrutasItemStateChanged

    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMouseClicked

        String s = JOptionPane.showInputDialog(this, "Cantidad", "Cantidad de :" + tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 0), JOptionPane.QUESTION_MESSAGE);

        if (s != null) {
            if (!s.isEmpty()) {
                int cantidad = Integer.parseInt(s);

                int iva = cmbFrutas.getSelectedIndex();

                String producto = (String) tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 0);

                float precio = (float) tablaProductos.getValueAt(tablaProductos.getSelectedRow(), 1);
                Object linea[] = new Object[3];
                linea[0] = producto;
                linea[1] = cantidad;

                double n;
                switch (iva) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        n = 1.04 * (precio * cantidad);
                        linea[2] = (float) (Math.round(n * 100.0) / 100.0);
                        break;

                    case 4:
                    case 5:
                        n = 1.1 * (precio * cantidad);
                        linea[2] = (float) (Math.round(n * 100.0) / 100.0);
                        break;
                    case 6:
                        n = 1.21 * (precio * cantidad);
                        linea[2] = (float) (Math.round(n * 100.0) / 100.0);
                        break;

                }

                modeloCompras.addRow(linea);
                float total = 0;
                for (int i = 0; i < tablaCompra.getRowCount(); i++) {

                    total += (float) tablaCompra.getValueAt(i, 2);

                    lblTotal.setText((Math.round(total * 100.0) / 100.0) + "");
                }

            }
        }


    }//GEN-LAST:event_tablaProductosMouseClicked

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed

        if (modeloCompras.getRowCount() > 0) {
            modeloCompras.removeRow(tablaCompra.getSelectedRow());

            float total = 0;
            for (int i = 0; i < tablaCompra.getRowCount(); i++) {

                total += (float) tablaCompra.getValueAt(i, 2);

                lblTotal.setText((Math.round(total * 100.0) / 100.0) + "");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay productos en la cesta", "ERROR", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        if (modeloCompras.getRowCount() > 0) {
            modeloCompras.setRowCount(0);
            lblTotal.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "No hay productos en la cesta", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox<String> cmbFrutas;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tablaCompra;
    private javax.swing.JTable tablaProductos;
    // End of variables declaration//GEN-END:variables
    private java.sql.Connection conexion;
    private java.sql.Statement sentenciaClases;
    private java.sql.Statement sentencia;
    private java.sql.ResultSet resultadoClases;
    private java.sql.ResultSet resultado;
    private DefaultTableModel modeloProductos;
    private DefaultTableModel modeloCompras;
    private JTableHeader header;
}
